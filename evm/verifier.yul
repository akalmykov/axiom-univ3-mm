
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine:bool := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x80, mod(calldataload(0x60), f_q))
mstore(0xa0, mod(calldataload(0x80), f_q))
mstore(0xc0, mod(calldataload(0xa0), f_q))
mstore(0xe0, mod(calldataload(0xc0), f_q))
mstore(0x100, mod(calldataload(0xe0), f_q))
mstore(0x120, mod(calldataload(0x100), f_q))
mstore(0x140, mod(calldataload(0x120), f_q))
mstore(0x160, mod(calldataload(0x140), f_q))
mstore(0x180, mod(calldataload(0x160), f_q))
mstore(0x1a0, mod(calldataload(0x180), f_q))
mstore(0x1c0, mod(calldataload(0x1a0), f_q))
mstore(0x1e0, mod(calldataload(0x1c0), f_q))
mstore(0x200, mod(calldataload(0x1e0), f_q))
mstore(0x220, mod(calldataload(0x200), f_q))
mstore(0x240, mod(calldataload(0x220), f_q))
mstore(0x260, mod(calldataload(0x240), f_q))
mstore(0x280, mod(calldataload(0x260), f_q))
mstore(0x2a0, mod(calldataload(0x280), f_q))
mstore(0x2c0, mod(calldataload(0x2a0), f_q))
mstore(0x2e0, mod(calldataload(0x2c0), f_q))
mstore(0x300, mod(calldataload(0x2e0), f_q))
mstore(0x320, mod(calldataload(0x300), f_q))
mstore(0x340, mod(calldataload(0x320), f_q))
mstore(0x360, mod(calldataload(0x340), f_q))
mstore(0x380, mod(calldataload(0x360), f_q))
mstore(0x3a0, mod(calldataload(0x380), f_q))
mstore(0x3c0, mod(calldataload(0x3a0), f_q))
mstore(0x3e0, mod(calldataload(0x3c0), f_q))
mstore(0x400, mod(calldataload(0x3e0), f_q))
mstore(0x0, 19490156471812497485503882988859952542039747526620317884599216987861282790805)

        {
            let x := calldataload(0x400)
            mstore(0x420, x)
            let y := calldataload(0x420)
            mstore(0x440, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x460, keccak256(0x0, 1120))
{
            let hash := mload(0x460)
            mstore(0x480, mod(hash, f_q))
            mstore(0x4a0, hash)
        }

        {
            let x := calldataload(0x440)
            mstore(0x4c0, x)
            let y := calldataload(0x460)
            mstore(0x4e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x480)
            mstore(0x500, x)
            let y := calldataload(0x4a0)
            mstore(0x520, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x540, keccak256(0x4a0, 160))
{
            let hash := mload(0x540)
            mstore(0x560, mod(hash, f_q))
            mstore(0x580, hash)
        }
mstore8(1440, 1)
mstore(0x5a0, keccak256(0x580, 33))
{
            let hash := mload(0x5a0)
            mstore(0x5c0, mod(hash, f_q))
            mstore(0x5e0, hash)
        }

        {
            let x := calldataload(0x4c0)
            mstore(0x600, x)
            let y := calldataload(0x4e0)
            mstore(0x620, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x500)
            mstore(0x640, x)
            let y := calldataload(0x520)
            mstore(0x660, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x540)
            mstore(0x680, x)
            let y := calldataload(0x560)
            mstore(0x6a0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x6c0, keccak256(0x5e0, 224))
{
            let hash := mload(0x6c0)
            mstore(0x6e0, mod(hash, f_q))
            mstore(0x700, hash)
        }

        {
            let x := calldataload(0x580)
            mstore(0x720, x)
            let y := calldataload(0x5a0)
            mstore(0x740, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x5c0)
            mstore(0x760, x)
            let y := calldataload(0x5e0)
            mstore(0x780, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x600)
            mstore(0x7a0, x)
            let y := calldataload(0x620)
            mstore(0x7c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x640)
            mstore(0x7e0, x)
            let y := calldataload(0x660)
            mstore(0x800, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x820, keccak256(0x700, 288))
{
            let hash := mload(0x820)
            mstore(0x840, mod(hash, f_q))
            mstore(0x860, hash)
        }
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, mod(calldataload(0x880), f_q))
mstore(0xaa0, mod(calldataload(0x8a0), f_q))
mstore(0xac0, mod(calldataload(0x8c0), f_q))
mstore(0xae0, keccak256(0x860, 640))
{
            let hash := mload(0xae0)
            mstore(0xb00, mod(hash, f_q))
            mstore(0xb20, hash)
        }
mstore8(2880, 1)
mstore(0xb40, keccak256(0xb20, 33))
{
            let hash := mload(0xb40)
            mstore(0xb60, mod(hash, f_q))
            mstore(0xb80, hash)
        }

        {
            let x := calldataload(0x8e0)
            mstore(0xba0, x)
            let y := calldataload(0x900)
            mstore(0xbc0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xbe0, keccak256(0xb80, 96))
{
            let hash := mload(0xbe0)
            mstore(0xc00, mod(hash, f_q))
            mstore(0xc20, hash)
        }

        {
            let x := calldataload(0x920)
            mstore(0xc40, x)
            let y := calldataload(0x940)
            mstore(0xc60, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xc80, mulmod(mload(0x840), mload(0x840), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))
mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))
mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))
mstore(0xe60, mulmod(mload(0xe40), mload(0xe40), f_q))
mstore(0xe80, mulmod(mload(0xe60), mload(0xe60), f_q))
mstore(0xea0, mulmod(mload(0xe80), mload(0xe80), f_q))
mstore(0xec0, mulmod(mload(0xea0), mload(0xea0), f_q))
mstore(0xee0, mulmod(mload(0xec0), mload(0xec0), f_q))
mstore(0xf00, addmod(mload(0xee0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xf20, mulmod(mload(0xf00), 21888221997584217086951279548962733484243966294447177135413498358668068307201, f_q))
mstore(0xf40, mulmod(mload(0xf20), 3021657639704125634180027002055603444074884651778695243656177678924693902744, f_q))
mstore(0xf60, addmod(mload(0x840), 18866585232135149588066378743201671644473479748637339100042026507651114592873, f_q))
mstore(0xf80, mulmod(mload(0xf20), 13315224328250071823986980334210714047804323884995968263773489477577155309695, f_q))
mstore(0xfa0, addmod(mload(0x840), 8573018543589203398259425411046561040744040515420066079924714708998653185922, f_q))
mstore(0xfc0, mulmod(mload(0xf20), 6852144584591678924477440653887876563116097870276213106119596023961179534039, f_q))
mstore(0xfe0, addmod(mload(0x840), 15036098287247596297768965091369398525432266530139821237578608162614628961578, f_q))
mstore(0x1000, mulmod(mload(0xf20), 6363119021782681274480715230122258277189830284152385293217720612674619714422, f_q))
mstore(0x1020, addmod(mload(0x840), 15525123850056593947765690515135016811358534116263649050480483573901188781195, f_q))
mstore(0x1040, mulmod(mload(0xf20), 495188420091111145957709789221178673495499187437761988132837836548330853701, f_q))
mstore(0x1060, addmod(mload(0x840), 21393054451748164076288695956036096415052865212978272355565366350027477641916, f_q))
mstore(0x1080, mulmod(mload(0xf20), 14686510910986211321976396297238126901237973400949744736326777596334651355305, f_q))
mstore(0x10a0, addmod(mload(0x840), 7201731960853063900270009448019148187310390999466289607371426590241157140312, f_q))
mstore(0x10c0, mulmod(mload(0xf20), 15402826414547299628414612080036060696555554914079673875872749760617770134879, f_q))
mstore(0x10e0, addmod(mload(0x840), 6485416457291975593831793665221214391992809486336360467825454425958038360738, f_q))
mstore(0x1100, mulmod(mload(0xf20), 1, f_q))
mstore(0x1120, addmod(mload(0x840), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1140, mulmod(mload(0xf20), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))
mstore(0x1160, addmod(mload(0x840), 2855281034601326619502779289517034852317245347382893578658160672914005347465, f_q))
mstore(0x1180, mulmod(mload(0xf20), 5854133144571823792863860130267644613802765696134002830362054821530146160770, f_q))
mstore(0x11a0, addmod(mload(0x840), 16034109727267451429382545614989630474745598704282031513336149365045662334847, f_q))
mstore(0x11c0, mulmod(mload(0xf20), 9697063347556872083384215826199993067635178715531258559890418744774301211662, f_q))
mstore(0x11e0, addmod(mload(0x840), 12191179524282403138862189919057282020913185684884775783807785441801507283955, f_q))
mstore(0x1200, mulmod(mload(0xf20), 6955697244493336113861667751840378876927906302623587437721024018233754910398, f_q))
mstore(0x1220, addmod(mload(0x840), 14932545627345939108384737993416896211620458097792446905977180168342053585219, f_q))
mstore(0x1240, mulmod(mload(0xf20), 5289443209903185443361862148540090689648485914368835830972895623576469023722, f_q))
mstore(0x1260, addmod(mload(0x840), 16598799661936089778884543596717184398899878486047198512725308562999339471895, f_q))
mstore(0x1280, mulmod(mload(0xf20), 4509404676247677387317362072810231899718070082381452255950861037254608304934, f_q))
mstore(0x12a0, addmod(mload(0x840), 17378838195591597834929043672447043188830294318034582087747343149321200190683, f_q))
mstore(0x12c0, mulmod(mload(0xf20), 2579947959091681244170407980400327834520881737801886423874592072501514087543, f_q))
mstore(0x12e0, addmod(mload(0x840), 19308294912747593978075997764856947254027482662614147919823612114074294408074, f_q))
mstore(0x1300, mulmod(mload(0xf20), 21846745818185811051373434299876022191132089169516983080959277716660228899818, f_q))
mstore(0x1320, addmod(mload(0x840), 41497053653464170872971445381252897416275230899051262738926469915579595799, f_q))
mstore(0x1340, mulmod(mload(0xf20), 1459528961030896569807206253631725410868595642414057264270714861278164633285, f_q))
mstore(0x1360, addmod(mload(0x840), 20428713910808378652439199491625549677679768758001977079427489325297643862332, f_q))
mstore(0x1380, mulmod(mload(0xf20), 21594472933355353940227302948201802990541640451776958309590170926766063614527, f_q))
mstore(0x13a0, addmod(mload(0x840), 293769938483921282019102797055472098006723948639076034108033259809744881090, f_q))
mstore(0x13c0, mulmod(mload(0xf20), 9228489335593836417731216695316971397516686186585289059470421738439643366942, f_q))
mstore(0x13e0, addmod(mload(0x840), 12659753536245438804515189049940303691031678213830745284227782448136165128675, f_q))
mstore(0x1400, mulmod(mload(0xf20), 13526759757306252939732186602630155490343117803221487512984160143178057306805, f_q))
mstore(0x1420, addmod(mload(0x840), 8361483114533022282514219142627119598205246597194546830714044043397751188812, f_q))
mstore(0x1440, mulmod(mload(0xf20), 16722112256235738599640138637711059524347378135686596767512885208913020182609, f_q))
mstore(0x1460, addmod(mload(0x840), 5166130615603536622606267107546215564200986264729437576185318977662788313008, f_q))
mstore(0x1480, mulmod(mload(0xf20), 13098481875020205420942233016824212164786287930169045450599302794675261377069, f_q))
mstore(0x14a0, addmod(mload(0x840), 8789760996819069801304172728433062923762076470246988893098901391900547118548, f_q))
mstore(0x14c0, mulmod(mload(0xf20), 11377070488770263259987342577173204149358055510182982082489928583535951905289, f_q))
mstore(0x14e0, addmod(mload(0x840), 10511172383069011962259063168084070939190308890233052261208275603039856590328, f_q))
mstore(0x1500, mulmod(mload(0xf20), 4443263508319656594054352481848447997537391617204595126809744742387004492585, f_q))
mstore(0x1520, addmod(mload(0x840), 17444979363519618628192053263408827091010972783211439216888459444188804003032, f_q))
mstore(0x1540, mulmod(mload(0xf20), 19985282492189863552708916346580412311177862193769287858714131049050994424713, f_q))
mstore(0x1560, addmod(mload(0x840), 1902960379649411669537489398676862777370502206646746484984073137524814070904, f_q))
mstore(0x1580, mulmod(mload(0xf20), 14097108278147741990520379122266872928869658252366071399515986875510798690086, f_q))
mstore(0x15a0, addmod(mload(0x840), 7791134593691533231726026622990402159678706148049962944182217311065009805531, f_q))
mstore(0x15c0, mulmod(mload(0xf20), 6627785884599252700762253281725354514166862545029838477137108799418301075772, f_q))
mstore(0x15e0, addmod(mload(0x840), 15260456987240022521484152463531920574381501855386195866561095387157507419845, f_q))
mstore(0x1600, mulmod(mload(0xf20), 17903030951520571210920333716852671101035531163558200326249599288512346109298, f_q))
mstore(0x1620, addmod(mload(0x840), 3985211920318704011326072028404603987512833236857834017448604898063462386319, f_q))
mstore(0x1640, mulmod(mload(0xf20), 11035518299930001136359438931464797296692550928390518034154929456101747640464, f_q))
mstore(0x1660, addmod(mload(0x840), 10852724571909274085886966813792477791855813472025516309543274730474060855153, f_q))
mstore(0x1680, mulmod(mload(0xf20), 18688952208745222403383340988737175223354233319065239587068249291731518085091, f_q))
mstore(0x16a0, addmod(mload(0x840), 3199290663094052818863064756520099865194131081350794756629954894844290410526, f_q))
mstore(0x16c0, mulmod(mload(0xf20), 8090920612475884933082466243206416300093207106708869460568715124120849083471, f_q))
mstore(0x16e0, addmod(mload(0x840), 13797322259363390289163939502050858788455157293707164883129489062454959412146, f_q))
mstore(0x1700, mulmod(mload(0xf20), 12491230264321380165669116208790466830459716800431293091713220204712467607643, f_q))
mstore(0x1720, addmod(mload(0x840), 9397012607517895056577289536466808258088647599984741251984983981863340887974, f_q))
mstore(0x1740, mulmod(mload(0xf20), 14687965552285838243290987533880488643745654567024204451720932257436576359630, f_q))
mstore(0x1760, addmod(mload(0x840), 7200277319553436978955418211376786444802709833391829891977271929139232135987, f_q))
mstore(0x1780, mulmod(mload(0xf20), 10782482590221345366894477779143691555941079397976808158583337170923876671981, f_q))
mstore(0x17a0, addmod(mload(0x840), 11105760281617929855351927966113583532607285002439226185114867015651931823636, f_q))
mstore(0x17c0, mulmod(mload(0xf20), 1452540440676902820341293582407938150865945383684436373266313854321654075600, f_q))
mstore(0x17e0, addmod(mload(0x840), 20435702431162372401905112162849336937682419016731597970431890332254154420017, f_q))
mstore(0x1800, mulmod(mload(0xf20), 13634252820192586424999035792358765796924408729195911337098964638191944583761, f_q))
mstore(0x1820, addmod(mload(0x840), 8253990051646688797247369952898509291623955671220123006599239548383863911856, f_q))
mstore(0x1840, mulmod(mload(0xf20), 3358079685698890421105181125304567925649305773352495778456565263339712823690, f_q))
mstore(0x1860, addmod(mload(0x840), 18530163186140384801141224619952707162899058627063538565241638923236095671927, f_q))
mstore(0x1880, mulmod(mload(0xf20), 3628700364396504631491042807121099764524754378892978335944181818035417230606, f_q))
mstore(0x18a0, addmod(mload(0x840), 18259542507442770590755362938136175324023610021523056007754022368540391265011, f_q))
mstore(0x18c0, mulmod(mload(0xf20), 5350958374163400325432855009358668006196165884258454958241166518346196236341, f_q))
mstore(0x18e0, addmod(mload(0x840), 16537284497675874896813550735898607082352198516157579385457037668229612259276, f_q))
{
            let prod := mload(0xf60)

                prod := mulmod(mload(0xfa0), prod, f_q)
                mstore(0x1900, prod)
            
                prod := mulmod(mload(0xfe0), prod, f_q)
                mstore(0x1920, prod)
            
                prod := mulmod(mload(0x1020), prod, f_q)
                mstore(0x1940, prod)
            
                prod := mulmod(mload(0x1060), prod, f_q)
                mstore(0x1960, prod)
            
                prod := mulmod(mload(0x10a0), prod, f_q)
                mstore(0x1980, prod)
            
                prod := mulmod(mload(0x10e0), prod, f_q)
                mstore(0x19a0, prod)
            
                prod := mulmod(mload(0x1120), prod, f_q)
                mstore(0x19c0, prod)
            
                prod := mulmod(mload(0x1160), prod, f_q)
                mstore(0x19e0, prod)
            
                prod := mulmod(mload(0x11a0), prod, f_q)
                mstore(0x1a00, prod)
            
                prod := mulmod(mload(0x11e0), prod, f_q)
                mstore(0x1a20, prod)
            
                prod := mulmod(mload(0x1220), prod, f_q)
                mstore(0x1a40, prod)
            
                prod := mulmod(mload(0x1260), prod, f_q)
                mstore(0x1a60, prod)
            
                prod := mulmod(mload(0x12a0), prod, f_q)
                mstore(0x1a80, prod)
            
                prod := mulmod(mload(0x12e0), prod, f_q)
                mstore(0x1aa0, prod)
            
                prod := mulmod(mload(0x1320), prod, f_q)
                mstore(0x1ac0, prod)
            
                prod := mulmod(mload(0x1360), prod, f_q)
                mstore(0x1ae0, prod)
            
                prod := mulmod(mload(0x13a0), prod, f_q)
                mstore(0x1b00, prod)
            
                prod := mulmod(mload(0x13e0), prod, f_q)
                mstore(0x1b20, prod)
            
                prod := mulmod(mload(0x1420), prod, f_q)
                mstore(0x1b40, prod)
            
                prod := mulmod(mload(0x1460), prod, f_q)
                mstore(0x1b60, prod)
            
                prod := mulmod(mload(0x14a0), prod, f_q)
                mstore(0x1b80, prod)
            
                prod := mulmod(mload(0x14e0), prod, f_q)
                mstore(0x1ba0, prod)
            
                prod := mulmod(mload(0x1520), prod, f_q)
                mstore(0x1bc0, prod)
            
                prod := mulmod(mload(0x1560), prod, f_q)
                mstore(0x1be0, prod)
            
                prod := mulmod(mload(0x15a0), prod, f_q)
                mstore(0x1c00, prod)
            
                prod := mulmod(mload(0x15e0), prod, f_q)
                mstore(0x1c20, prod)
            
                prod := mulmod(mload(0x1620), prod, f_q)
                mstore(0x1c40, prod)
            
                prod := mulmod(mload(0x1660), prod, f_q)
                mstore(0x1c60, prod)
            
                prod := mulmod(mload(0x16a0), prod, f_q)
                mstore(0x1c80, prod)
            
                prod := mulmod(mload(0x16e0), prod, f_q)
                mstore(0x1ca0, prod)
            
                prod := mulmod(mload(0x1720), prod, f_q)
                mstore(0x1cc0, prod)
            
                prod := mulmod(mload(0x1760), prod, f_q)
                mstore(0x1ce0, prod)
            
                prod := mulmod(mload(0x17a0), prod, f_q)
                mstore(0x1d00, prod)
            
                prod := mulmod(mload(0x17e0), prod, f_q)
                mstore(0x1d20, prod)
            
                prod := mulmod(mload(0x1820), prod, f_q)
                mstore(0x1d40, prod)
            
                prod := mulmod(mload(0x1860), prod, f_q)
                mstore(0x1d60, prod)
            
                prod := mulmod(mload(0x18a0), prod, f_q)
                mstore(0x1d80, prod)
            
                prod := mulmod(mload(0x18e0), prod, f_q)
                mstore(0x1da0, prod)
            
                prod := mulmod(mload(0xf00), prod, f_q)
                mstore(0x1dc0, prod)
            
        }
mstore(0x1e00, 32)
mstore(0x1e20, 32)
mstore(0x1e40, 32)
mstore(0x1e60, mload(0x1dc0))
mstore(0x1e80, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1ea0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1e00, 0xc0, 0x1de0, 0x20), 1), success)
{
            
            let inv := mload(0x1de0)
            let v
        
                    v := mload(0xf00)
                    mstore(3840, mulmod(mload(0x1da0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18e0)
                    mstore(6368, mulmod(mload(0x1d80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x18a0)
                    mstore(6304, mulmod(mload(0x1d60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1860)
                    mstore(6240, mulmod(mload(0x1d40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1820)
                    mstore(6176, mulmod(mload(0x1d20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17e0)
                    mstore(6112, mulmod(mload(0x1d00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x17a0)
                    mstore(6048, mulmod(mload(0x1ce0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1760)
                    mstore(5984, mulmod(mload(0x1cc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1720)
                    mstore(5920, mulmod(mload(0x1ca0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16e0)
                    mstore(5856, mulmod(mload(0x1c80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x16a0)
                    mstore(5792, mulmod(mload(0x1c60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1660)
                    mstore(5728, mulmod(mload(0x1c40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1620)
                    mstore(5664, mulmod(mload(0x1c20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15e0)
                    mstore(5600, mulmod(mload(0x1c00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x15a0)
                    mstore(5536, mulmod(mload(0x1be0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1560)
                    mstore(5472, mulmod(mload(0x1bc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1520)
                    mstore(5408, mulmod(mload(0x1ba0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14e0)
                    mstore(5344, mulmod(mload(0x1b80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x14a0)
                    mstore(5280, mulmod(mload(0x1b60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1460)
                    mstore(5216, mulmod(mload(0x1b40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1420)
                    mstore(5152, mulmod(mload(0x1b20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13e0)
                    mstore(5088, mulmod(mload(0x1b00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x13a0)
                    mstore(5024, mulmod(mload(0x1ae0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1360)
                    mstore(4960, mulmod(mload(0x1ac0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1320)
                    mstore(4896, mulmod(mload(0x1aa0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12e0)
                    mstore(4832, mulmod(mload(0x1a80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x12a0)
                    mstore(4768, mulmod(mload(0x1a60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1260)
                    mstore(4704, mulmod(mload(0x1a40), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1220)
                    mstore(4640, mulmod(mload(0x1a20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11e0)
                    mstore(4576, mulmod(mload(0x1a00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x11a0)
                    mstore(4512, mulmod(mload(0x19e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1160)
                    mstore(4448, mulmod(mload(0x19c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1120)
                    mstore(4384, mulmod(mload(0x19a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10e0)
                    mstore(4320, mulmod(mload(0x1980), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10a0)
                    mstore(4256, mulmod(mload(0x1960), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1060)
                    mstore(4192, mulmod(mload(0x1940), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1020)
                    mstore(4128, mulmod(mload(0x1920), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfe0)
                    mstore(4064, mulmod(mload(0x1900), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfa0)
                    mstore(4000, mulmod(mload(0xf60), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xf60, inv)

        }
mstore(0x1ec0, mulmod(mload(0xf40), mload(0xf60), f_q))
mstore(0x1ee0, mulmod(mload(0xf80), mload(0xfa0), f_q))
mstore(0x1f00, mulmod(mload(0xfc0), mload(0xfe0), f_q))
mstore(0x1f20, mulmod(mload(0x1000), mload(0x1020), f_q))
mstore(0x1f40, mulmod(mload(0x1040), mload(0x1060), f_q))
mstore(0x1f60, mulmod(mload(0x1080), mload(0x10a0), f_q))
mstore(0x1f80, mulmod(mload(0x10c0), mload(0x10e0), f_q))
mstore(0x1fa0, mulmod(mload(0x1100), mload(0x1120), f_q))
mstore(0x1fc0, mulmod(mload(0x1140), mload(0x1160), f_q))
mstore(0x1fe0, mulmod(mload(0x1180), mload(0x11a0), f_q))
mstore(0x2000, mulmod(mload(0x11c0), mload(0x11e0), f_q))
mstore(0x2020, mulmod(mload(0x1200), mload(0x1220), f_q))
mstore(0x2040, mulmod(mload(0x1240), mload(0x1260), f_q))
mstore(0x2060, mulmod(mload(0x1280), mload(0x12a0), f_q))
mstore(0x2080, mulmod(mload(0x12c0), mload(0x12e0), f_q))
mstore(0x20a0, mulmod(mload(0x1300), mload(0x1320), f_q))
mstore(0x20c0, mulmod(mload(0x1340), mload(0x1360), f_q))
mstore(0x20e0, mulmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x2100, mulmod(mload(0x13c0), mload(0x13e0), f_q))
mstore(0x2120, mulmod(mload(0x1400), mload(0x1420), f_q))
mstore(0x2140, mulmod(mload(0x1440), mload(0x1460), f_q))
mstore(0x2160, mulmod(mload(0x1480), mload(0x14a0), f_q))
mstore(0x2180, mulmod(mload(0x14c0), mload(0x14e0), f_q))
mstore(0x21a0, mulmod(mload(0x1500), mload(0x1520), f_q))
mstore(0x21c0, mulmod(mload(0x1540), mload(0x1560), f_q))
mstore(0x21e0, mulmod(mload(0x1580), mload(0x15a0), f_q))
mstore(0x2200, mulmod(mload(0x15c0), mload(0x15e0), f_q))
mstore(0x2220, mulmod(mload(0x1600), mload(0x1620), f_q))
mstore(0x2240, mulmod(mload(0x1640), mload(0x1660), f_q))
mstore(0x2260, mulmod(mload(0x1680), mload(0x16a0), f_q))
mstore(0x2280, mulmod(mload(0x16c0), mload(0x16e0), f_q))
mstore(0x22a0, mulmod(mload(0x1700), mload(0x1720), f_q))
mstore(0x22c0, mulmod(mload(0x1740), mload(0x1760), f_q))
mstore(0x22e0, mulmod(mload(0x1780), mload(0x17a0), f_q))
mstore(0x2300, mulmod(mload(0x17c0), mload(0x17e0), f_q))
mstore(0x2320, mulmod(mload(0x1800), mload(0x1820), f_q))
mstore(0x2340, mulmod(mload(0x1840), mload(0x1860), f_q))
mstore(0x2360, mulmod(mload(0x1880), mload(0x18a0), f_q))
mstore(0x2380, mulmod(mload(0x18c0), mload(0x18e0), f_q))
{
            let result := mulmod(mload(0x1fa0), mload(0x20), f_q)
result := addmod(mulmod(mload(0x1fc0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x1fe0), mload(0x60), f_q), result, f_q)
result := addmod(mulmod(mload(0x2000), mload(0x80), f_q), result, f_q)
result := addmod(mulmod(mload(0x2020), mload(0xa0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2040), mload(0xc0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2060), mload(0xe0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2080), mload(0x100), f_q), result, f_q)
result := addmod(mulmod(mload(0x20a0), mload(0x120), f_q), result, f_q)
result := addmod(mulmod(mload(0x20c0), mload(0x140), f_q), result, f_q)
result := addmod(mulmod(mload(0x20e0), mload(0x160), f_q), result, f_q)
result := addmod(mulmod(mload(0x2100), mload(0x180), f_q), result, f_q)
result := addmod(mulmod(mload(0x2120), mload(0x1a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2140), mload(0x1c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2160), mload(0x1e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2180), mload(0x200), f_q), result, f_q)
result := addmod(mulmod(mload(0x21a0), mload(0x220), f_q), result, f_q)
result := addmod(mulmod(mload(0x21c0), mload(0x240), f_q), result, f_q)
result := addmod(mulmod(mload(0x21e0), mload(0x260), f_q), result, f_q)
result := addmod(mulmod(mload(0x2200), mload(0x280), f_q), result, f_q)
result := addmod(mulmod(mload(0x2220), mload(0x2a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2240), mload(0x2c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2260), mload(0x2e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2280), mload(0x300), f_q), result, f_q)
result := addmod(mulmod(mload(0x22a0), mload(0x320), f_q), result, f_q)
result := addmod(mulmod(mload(0x22c0), mload(0x340), f_q), result, f_q)
result := addmod(mulmod(mload(0x22e0), mload(0x360), f_q), result, f_q)
result := addmod(mulmod(mload(0x2300), mload(0x380), f_q), result, f_q)
result := addmod(mulmod(mload(0x2320), mload(0x3a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2340), mload(0x3c0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2360), mload(0x3e0), f_q), result, f_q)
result := addmod(mulmod(mload(0x2380), mload(0x400), f_q), result, f_q)
mstore(9120, result)
        }
mstore(0x23c0, mulmod(mload(0x8c0), mload(0x8a0), f_q))
mstore(0x23e0, addmod(mload(0x880), mload(0x23c0), f_q))
mstore(0x2400, addmod(mload(0x23e0), sub(f_q, mload(0x8e0)), f_q))
mstore(0x2420, mulmod(mload(0x2400), mload(0x960), f_q))
mstore(0x2440, mulmod(mload(0x6e0), mload(0x2420), f_q))
mstore(0x2460, addmod(1, sub(f_q, mload(0xa00)), f_q))
mstore(0x2480, mulmod(mload(0x2460), mload(0x1fa0), f_q))
mstore(0x24a0, addmod(mload(0x2440), mload(0x2480), f_q))
mstore(0x24c0, mulmod(mload(0x6e0), mload(0x24a0), f_q))
mstore(0x24e0, mulmod(mload(0xa00), mload(0xa00), f_q))
mstore(0x2500, addmod(mload(0x24e0), sub(f_q, mload(0xa00)), f_q))
mstore(0x2520, mulmod(mload(0x2500), mload(0x1ec0), f_q))
mstore(0x2540, addmod(mload(0x24c0), mload(0x2520), f_q))
mstore(0x2560, mulmod(mload(0x6e0), mload(0x2540), f_q))
mstore(0x2580, addmod(1, sub(f_q, mload(0x1ec0)), f_q))
mstore(0x25a0, addmod(mload(0x1ee0), mload(0x1f00), f_q))
mstore(0x25c0, addmod(mload(0x25a0), mload(0x1f20), f_q))
mstore(0x25e0, addmod(mload(0x25c0), mload(0x1f40), f_q))
mstore(0x2600, addmod(mload(0x25e0), mload(0x1f60), f_q))
mstore(0x2620, addmod(mload(0x2600), mload(0x1f80), f_q))
mstore(0x2640, addmod(mload(0x2580), sub(f_q, mload(0x2620)), f_q))
mstore(0x2660, mulmod(mload(0x9a0), mload(0x560), f_q))
mstore(0x2680, addmod(mload(0x900), mload(0x2660), f_q))
mstore(0x26a0, addmod(mload(0x2680), mload(0x5c0), f_q))
mstore(0x26c0, mulmod(mload(0x9c0), mload(0x560), f_q))
mstore(0x26e0, addmod(mload(0x880), mload(0x26c0), f_q))
mstore(0x2700, addmod(mload(0x26e0), mload(0x5c0), f_q))
mstore(0x2720, mulmod(mload(0x2700), mload(0x26a0), f_q))
mstore(0x2740, mulmod(mload(0x9e0), mload(0x560), f_q))
mstore(0x2760, addmod(mload(0x23a0), mload(0x2740), f_q))
mstore(0x2780, addmod(mload(0x2760), mload(0x5c0), f_q))
mstore(0x27a0, mulmod(mload(0x2780), mload(0x2720), f_q))
mstore(0x27c0, mulmod(mload(0x27a0), mload(0xa20), f_q))
mstore(0x27e0, mulmod(1, mload(0x560), f_q))
mstore(0x2800, mulmod(mload(0x840), mload(0x27e0), f_q))
mstore(0x2820, addmod(mload(0x900), mload(0x2800), f_q))
mstore(0x2840, addmod(mload(0x2820), mload(0x5c0), f_q))
mstore(0x2860, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x560), f_q))
mstore(0x2880, mulmod(mload(0x840), mload(0x2860), f_q))
mstore(0x28a0, addmod(mload(0x880), mload(0x2880), f_q))
mstore(0x28c0, addmod(mload(0x28a0), mload(0x5c0), f_q))
mstore(0x28e0, mulmod(mload(0x28c0), mload(0x2840), f_q))
mstore(0x2900, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x560), f_q))
mstore(0x2920, mulmod(mload(0x840), mload(0x2900), f_q))
mstore(0x2940, addmod(mload(0x23a0), mload(0x2920), f_q))
mstore(0x2960, addmod(mload(0x2940), mload(0x5c0), f_q))
mstore(0x2980, mulmod(mload(0x2960), mload(0x28e0), f_q))
mstore(0x29a0, mulmod(mload(0x2980), mload(0xa00), f_q))
mstore(0x29c0, addmod(mload(0x27c0), sub(f_q, mload(0x29a0)), f_q))
mstore(0x29e0, mulmod(mload(0x29c0), mload(0x2640), f_q))
mstore(0x2a00, addmod(mload(0x2560), mload(0x29e0), f_q))
mstore(0x2a20, mulmod(mload(0x6e0), mload(0x2a00), f_q))
mstore(0x2a40, addmod(1, sub(f_q, mload(0xa40)), f_q))
mstore(0x2a60, mulmod(mload(0x2a40), mload(0x1fa0), f_q))
mstore(0x2a80, addmod(mload(0x2a20), mload(0x2a60), f_q))
mstore(0x2aa0, mulmod(mload(0x6e0), mload(0x2a80), f_q))
mstore(0x2ac0, mulmod(mload(0xa40), mload(0xa40), f_q))
mstore(0x2ae0, addmod(mload(0x2ac0), sub(f_q, mload(0xa40)), f_q))
mstore(0x2b00, mulmod(mload(0x2ae0), mload(0x1ec0), f_q))
mstore(0x2b20, addmod(mload(0x2aa0), mload(0x2b00), f_q))
mstore(0x2b40, mulmod(mload(0x6e0), mload(0x2b20), f_q))
mstore(0x2b60, addmod(mload(0xa80), mload(0x560), f_q))
mstore(0x2b80, mulmod(mload(0x2b60), mload(0xa60), f_q))
mstore(0x2ba0, addmod(mload(0xac0), mload(0x5c0), f_q))
mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x2b80), f_q))
mstore(0x2be0, mulmod(mload(0x880), mload(0x940), f_q))
mstore(0x2c00, addmod(mload(0x2be0), mload(0x560), f_q))
mstore(0x2c20, mulmod(mload(0x2c00), mload(0xa40), f_q))
mstore(0x2c40, addmod(mload(0x920), mload(0x5c0), f_q))
mstore(0x2c60, mulmod(mload(0x2c40), mload(0x2c20), f_q))
mstore(0x2c80, addmod(mload(0x2bc0), sub(f_q, mload(0x2c60)), f_q))
mstore(0x2ca0, mulmod(mload(0x2c80), mload(0x2640), f_q))
mstore(0x2cc0, addmod(mload(0x2b40), mload(0x2ca0), f_q))
mstore(0x2ce0, mulmod(mload(0x6e0), mload(0x2cc0), f_q))
mstore(0x2d00, addmod(mload(0xa80), sub(f_q, mload(0xac0)), f_q))
mstore(0x2d20, mulmod(mload(0x2d00), mload(0x1fa0), f_q))
mstore(0x2d40, addmod(mload(0x2ce0), mload(0x2d20), f_q))
mstore(0x2d60, mulmod(mload(0x6e0), mload(0x2d40), f_q))
mstore(0x2d80, mulmod(mload(0x2d00), mload(0x2640), f_q))
mstore(0x2da0, addmod(mload(0xa80), sub(f_q, mload(0xaa0)), f_q))
mstore(0x2dc0, mulmod(mload(0x2da0), mload(0x2d80), f_q))
mstore(0x2de0, addmod(mload(0x2d60), mload(0x2dc0), f_q))
mstore(0x2e00, mulmod(mload(0xee0), mload(0xee0), f_q))
mstore(0x2e20, mulmod(mload(0x2e00), mload(0xee0), f_q))
mstore(0x2e40, mulmod(mload(0x2e20), mload(0xee0), f_q))
mstore(0x2e60, mulmod(1, mload(0xee0), f_q))
mstore(0x2e80, mulmod(1, mload(0x2e00), f_q))
mstore(0x2ea0, mulmod(1, mload(0x2e20), f_q))
mstore(0x2ec0, mulmod(mload(0x2de0), mload(0xf00), f_q))
mstore(0x2ee0, mulmod(mload(0xc80), mload(0x840), f_q))
mstore(0x2f00, mulmod(mload(0x2ee0), mload(0x840), f_q))
mstore(0x2f20, mulmod(mload(0x840), 1, f_q))
mstore(0x2f40, addmod(mload(0xc00), sub(f_q, mload(0x2f20)), f_q))
mstore(0x2f60, mulmod(mload(0x840), 5854133144571823792863860130267644613802765696134002830362054821530146160770, f_q))
mstore(0x2f80, addmod(mload(0xc00), sub(f_q, mload(0x2f60)), f_q))
mstore(0x2fa0, mulmod(mload(0x840), 9697063347556872083384215826199993067635178715531258559890418744774301211662, f_q))
mstore(0x2fc0, addmod(mload(0xc00), sub(f_q, mload(0x2fa0)), f_q))
mstore(0x2fe0, mulmod(mload(0x840), 15402826414547299628414612080036060696555554914079673875872749760617770134879, f_q))
mstore(0x3000, addmod(mload(0xc00), sub(f_q, mload(0x2fe0)), f_q))
mstore(0x3020, mulmod(mload(0x840), 19032961837237948602743626455740240236231119053033140765040043513661803148152, f_q))
mstore(0x3040, addmod(mload(0xc00), sub(f_q, mload(0x3020)), f_q))
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x2ee0), 4736883668178346996545086986819627905372801785859861761039164455939474815882, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x2ee0), 17151359203660928225701318758437647183175562614556172582659039730636333679735, f_q), f_q), result, f_q)
mstore(12384, result)
        }
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x2ee0), 7470511806983226874498209297862392041888689988572294883423852458120126520044, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x2ee0), 2224530251973873386125196487739371278694624537245101772475500710314493913191, f_q), f_q), result, f_q)
mstore(12416, result)
        }
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x2ee0), 2224530251973873386125196487739371278694624537245101772475500710314493913191, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x2ee0), 5271889210929994242826011141474604315488800354606228470677394252042071411029, f_q), f_q), result, f_q)
mstore(12448, result)
        }
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x2ee0), 1469155162432328970349083792793126972705202636972386811938550155728152863999, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x2ee0), 19267156282452397732246258578679775860328672410619376950891627956696323487854, f_q), f_q), result, f_q)
mstore(12480, result)
        }
mstore(0x30e0, mulmod(1, mload(0x2f40), f_q))
mstore(0x3100, mulmod(mload(0x30e0), mload(0x3040), f_q))
mstore(0x3120, mulmod(mload(0x3100), mload(0x2f80), f_q))
mstore(0x3140, mulmod(mload(0x3120), mload(0x2fc0), f_q))
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x840), 2855281034601326619502779289517034852317245347382893578658160672914005347466, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x840), 19032961837237948602743626455740240236231119053033140765040043513661803148151, f_q), f_q), result, f_q)
mstore(12640, result)
        }
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x840), 19032961837237948602743626455740240236231119053033140765040043513661803148151, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x840), 13178828692666124809879766325472595622428353356899137934677988692131656987382, f_q), f_q), result, f_q)
mstore(12672, result)
        }
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x840), 6485416457291975593831793665221214391992809486336360467825454425958038360739, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x840), 15402826414547299628414612080036060696555554914079673875872749760617770134878, f_q), f_q), result, f_q)
mstore(12704, result)
        }
{
            let result := mulmod(mload(0xc00), mulmod(mload(0x840), 15402826414547299628414612080036060696555554914079673875872749760617770134878, f_q), f_q)
result := addmod(mulmod(mload(0x840), mulmod(mload(0x840), 716315503561088306438215782797933795317581513129929139545972164283118779574, f_q), f_q), result, f_q)
mstore(12736, result)
        }
mstore(0x31e0, mulmod(mload(0x30e0), mload(0x3000), f_q))
{
            let result := mulmod(mload(0xc00), 1, f_q)
result := addmod(mulmod(mload(0x840), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q), result, f_q)
mstore(12800, result)
        }
{
            let prod := mload(0x3060)

                prod := mulmod(mload(0x3080), prod, f_q)
                mstore(0x3220, prod)
            
                prod := mulmod(mload(0x30a0), prod, f_q)
                mstore(0x3240, prod)
            
                prod := mulmod(mload(0x30c0), prod, f_q)
                mstore(0x3260, prod)
            
                prod := mulmod(mload(0x3160), prod, f_q)
                mstore(0x3280, prod)
            
                prod := mulmod(mload(0x3180), prod, f_q)
                mstore(0x32a0, prod)
            
                prod := mulmod(mload(0x3100), prod, f_q)
                mstore(0x32c0, prod)
            
                prod := mulmod(mload(0x31a0), prod, f_q)
                mstore(0x32e0, prod)
            
                prod := mulmod(mload(0x31c0), prod, f_q)
                mstore(0x3300, prod)
            
                prod := mulmod(mload(0x31e0), prod, f_q)
                mstore(0x3320, prod)
            
                prod := mulmod(mload(0x3200), prod, f_q)
                mstore(0x3340, prod)
            
                prod := mulmod(mload(0x30e0), prod, f_q)
                mstore(0x3360, prod)
            
        }
mstore(0x33a0, 32)
mstore(0x33c0, 32)
mstore(0x33e0, 32)
mstore(0x3400, mload(0x3360))
mstore(0x3420, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3440, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x33a0, 0xc0, 0x3380, 0x20), 1), success)
{
            
            let inv := mload(0x3380)
            let v
        
                    v := mload(0x30e0)
                    mstore(12512, mulmod(mload(0x3340), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3200)
                    mstore(12800, mulmod(mload(0x3320), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x31e0)
                    mstore(12768, mulmod(mload(0x3300), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x31c0)
                    mstore(12736, mulmod(mload(0x32e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x31a0)
                    mstore(12704, mulmod(mload(0x32c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3100)
                    mstore(12544, mulmod(mload(0x32a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3180)
                    mstore(12672, mulmod(mload(0x3280), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3160)
                    mstore(12640, mulmod(mload(0x3260), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x30c0)
                    mstore(12480, mulmod(mload(0x3240), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x30a0)
                    mstore(12448, mulmod(mload(0x3220), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x3080)
                    mstore(12416, mulmod(mload(0x3060), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3060, inv)

        }
{
            let result := mload(0x3060)
result := addmod(mload(0x3080), result, f_q)
result := addmod(mload(0x30a0), result, f_q)
result := addmod(mload(0x30c0), result, f_q)
mstore(13408, result)
        }
mstore(0x3480, mulmod(mload(0x3140), mload(0x3100), f_q))
{
            let result := mload(0x3160)
result := addmod(mload(0x3180), result, f_q)
mstore(13472, result)
        }
mstore(0x34c0, mulmod(mload(0x3140), mload(0x31e0), f_q))
{
            let result := mload(0x31a0)
result := addmod(mload(0x31c0), result, f_q)
mstore(13536, result)
        }
mstore(0x3500, mulmod(mload(0x3140), mload(0x30e0), f_q))
{
            let result := mload(0x3200)
mstore(13600, result)
        }
{
            let prod := mload(0x3460)

                prod := mulmod(mload(0x34a0), prod, f_q)
                mstore(0x3540, prod)
            
                prod := mulmod(mload(0x34e0), prod, f_q)
                mstore(0x3560, prod)
            
                prod := mulmod(mload(0x3520), prod, f_q)
                mstore(0x3580, prod)
            
        }
mstore(0x35c0, 32)
mstore(0x35e0, 32)
mstore(0x3600, 32)
mstore(0x3620, mload(0x3580))
mstore(0x3640, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x3660, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x35c0, 0xc0, 0x35a0, 0x20), 1), success)
{
            
            let inv := mload(0x35a0)
            let v
        
                    v := mload(0x3520)
                    mstore(13600, mulmod(mload(0x3560), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x34e0)
                    mstore(13536, mulmod(mload(0x3540), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x34a0)
                    mstore(13472, mulmod(mload(0x3460), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0x3460, inv)

        }
mstore(0x3680, mulmod(mload(0x3480), mload(0x34a0), f_q))
mstore(0x36a0, mulmod(mload(0x34c0), mload(0x34e0), f_q))
mstore(0x36c0, mulmod(mload(0x3500), mload(0x3520), f_q))
mstore(0x36e0, mulmod(mload(0xb00), mload(0xb00), f_q))
mstore(0x3700, mulmod(mload(0x36e0), mload(0xb00), f_q))
mstore(0x3720, mulmod(mload(0x3700), mload(0xb00), f_q))
mstore(0x3740, mulmod(mload(0x3720), mload(0xb00), f_q))
mstore(0x3760, mulmod(mload(0x3740), mload(0xb00), f_q))
mstore(0x3780, mulmod(mload(0x3760), mload(0xb00), f_q))
mstore(0x37a0, mulmod(mload(0x3780), mload(0xb00), f_q))
mstore(0x37c0, mulmod(mload(0x37a0), mload(0xb00), f_q))
mstore(0x37e0, mulmod(mload(0x37c0), mload(0xb00), f_q))
mstore(0x3800, mulmod(mload(0xb60), mload(0xb60), f_q))
mstore(0x3820, mulmod(mload(0x3800), mload(0xb60), f_q))
mstore(0x3840, mulmod(mload(0x3820), mload(0xb60), f_q))
{
            let result := mulmod(mload(0x880), mload(0x3060), f_q)
result := addmod(mulmod(mload(0x8a0), mload(0x3080), f_q), result, f_q)
result := addmod(mulmod(mload(0x8c0), mload(0x30a0), f_q), result, f_q)
result := addmod(mulmod(mload(0x8e0), mload(0x30c0), f_q), result, f_q)
mstore(14432, result)
        }
mstore(0x3880, mulmod(mload(0x3860), mload(0x3460), f_q))
mstore(0x38a0, mulmod(sub(f_q, mload(0x3880)), 1, f_q))
mstore(0x38c0, mulmod(mload(0x38a0), 1, f_q))
mstore(0x38e0, mulmod(1, mload(0x3480), f_q))
{
            let result := mulmod(mload(0xa00), mload(0x3160), f_q)
result := addmod(mulmod(mload(0xa20), mload(0x3180), f_q), result, f_q)
mstore(14592, result)
        }
mstore(0x3920, mulmod(mload(0x3900), mload(0x3680), f_q))
mstore(0x3940, mulmod(sub(f_q, mload(0x3920)), 1, f_q))
mstore(0x3960, mulmod(mload(0x38e0), 1, f_q))
{
            let result := mulmod(mload(0xa40), mload(0x3160), f_q)
result := addmod(mulmod(mload(0xa60), mload(0x3180), f_q), result, f_q)
mstore(14720, result)
        }
mstore(0x39a0, mulmod(mload(0x3980), mload(0x3680), f_q))
mstore(0x39c0, mulmod(sub(f_q, mload(0x39a0)), mload(0xb00), f_q))
mstore(0x39e0, mulmod(mload(0x38e0), mload(0xb00), f_q))
mstore(0x3a00, addmod(mload(0x3940), mload(0x39c0), f_q))
mstore(0x3a20, mulmod(mload(0x3a00), mload(0xb60), f_q))
mstore(0x3a40, mulmod(mload(0x3960), mload(0xb60), f_q))
mstore(0x3a60, mulmod(mload(0x39e0), mload(0xb60), f_q))
mstore(0x3a80, addmod(mload(0x38c0), mload(0x3a20), f_q))
mstore(0x3aa0, mulmod(1, mload(0x34c0), f_q))
{
            let result := mulmod(mload(0xa80), mload(0x31a0), f_q)
result := addmod(mulmod(mload(0xaa0), mload(0x31c0), f_q), result, f_q)
mstore(15040, result)
        }
mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0x36a0), f_q))
mstore(0x3b00, mulmod(sub(f_q, mload(0x3ae0)), 1, f_q))
mstore(0x3b20, mulmod(mload(0x3aa0), 1, f_q))
mstore(0x3b40, mulmod(mload(0x3b00), mload(0x3800), f_q))
mstore(0x3b60, mulmod(mload(0x3b20), mload(0x3800), f_q))
mstore(0x3b80, addmod(mload(0x3a80), mload(0x3b40), f_q))
mstore(0x3ba0, mulmod(1, mload(0x3500), f_q))
{
            let result := mulmod(mload(0xac0), mload(0x3200), f_q)
mstore(15296, result)
        }
mstore(0x3be0, mulmod(mload(0x3bc0), mload(0x36c0), f_q))
mstore(0x3c00, mulmod(sub(f_q, mload(0x3be0)), 1, f_q))
mstore(0x3c20, mulmod(mload(0x3ba0), 1, f_q))
{
            let result := mulmod(mload(0x900), mload(0x3200), f_q)
mstore(15424, result)
        }
mstore(0x3c60, mulmod(mload(0x3c40), mload(0x36c0), f_q))
mstore(0x3c80, mulmod(sub(f_q, mload(0x3c60)), mload(0xb00), f_q))
mstore(0x3ca0, mulmod(mload(0x3ba0), mload(0xb00), f_q))
mstore(0x3cc0, addmod(mload(0x3c00), mload(0x3c80), f_q))
{
            let result := mulmod(mload(0x920), mload(0x3200), f_q)
mstore(15584, result)
        }
mstore(0x3d00, mulmod(mload(0x3ce0), mload(0x36c0), f_q))
mstore(0x3d20, mulmod(sub(f_q, mload(0x3d00)), mload(0x36e0), f_q))
mstore(0x3d40, mulmod(mload(0x3ba0), mload(0x36e0), f_q))
mstore(0x3d60, addmod(mload(0x3cc0), mload(0x3d20), f_q))
{
            let result := mulmod(mload(0x940), mload(0x3200), f_q)
mstore(15744, result)
        }
mstore(0x3da0, mulmod(mload(0x3d80), mload(0x36c0), f_q))
mstore(0x3dc0, mulmod(sub(f_q, mload(0x3da0)), mload(0x3700), f_q))
mstore(0x3de0, mulmod(mload(0x3ba0), mload(0x3700), f_q))
mstore(0x3e00, addmod(mload(0x3d60), mload(0x3dc0), f_q))
{
            let result := mulmod(mload(0x960), mload(0x3200), f_q)
mstore(15904, result)
        }
mstore(0x3e40, mulmod(mload(0x3e20), mload(0x36c0), f_q))
mstore(0x3e60, mulmod(sub(f_q, mload(0x3e40)), mload(0x3720), f_q))
mstore(0x3e80, mulmod(mload(0x3ba0), mload(0x3720), f_q))
mstore(0x3ea0, addmod(mload(0x3e00), mload(0x3e60), f_q))
{
            let result := mulmod(mload(0x9a0), mload(0x3200), f_q)
mstore(16064, result)
        }
mstore(0x3ee0, mulmod(mload(0x3ec0), mload(0x36c0), f_q))
mstore(0x3f00, mulmod(sub(f_q, mload(0x3ee0)), mload(0x3740), f_q))
mstore(0x3f20, mulmod(mload(0x3ba0), mload(0x3740), f_q))
mstore(0x3f40, addmod(mload(0x3ea0), mload(0x3f00), f_q))
{
            let result := mulmod(mload(0x9c0), mload(0x3200), f_q)
mstore(16224, result)
        }
mstore(0x3f80, mulmod(mload(0x3f60), mload(0x36c0), f_q))
mstore(0x3fa0, mulmod(sub(f_q, mload(0x3f80)), mload(0x3760), f_q))
mstore(0x3fc0, mulmod(mload(0x3ba0), mload(0x3760), f_q))
mstore(0x3fe0, addmod(mload(0x3f40), mload(0x3fa0), f_q))
{
            let result := mulmod(mload(0x9e0), mload(0x3200), f_q)
mstore(16384, result)
        }
mstore(0x4020, mulmod(mload(0x4000), mload(0x36c0), f_q))
mstore(0x4040, mulmod(sub(f_q, mload(0x4020)), mload(0x3780), f_q))
mstore(0x4060, mulmod(mload(0x3ba0), mload(0x3780), f_q))
mstore(0x4080, addmod(mload(0x3fe0), mload(0x4040), f_q))
mstore(0x40a0, mulmod(mload(0x2e60), mload(0x3500), f_q))
mstore(0x40c0, mulmod(mload(0x2e80), mload(0x3500), f_q))
mstore(0x40e0, mulmod(mload(0x2ea0), mload(0x3500), f_q))
{
            let result := mulmod(mload(0x2ec0), mload(0x3200), f_q)
mstore(16640, result)
        }
mstore(0x4120, mulmod(mload(0x4100), mload(0x36c0), f_q))
mstore(0x4140, mulmod(sub(f_q, mload(0x4120)), mload(0x37a0), f_q))
mstore(0x4160, mulmod(mload(0x3ba0), mload(0x37a0), f_q))
mstore(0x4180, mulmod(mload(0x40a0), mload(0x37a0), f_q))
mstore(0x41a0, mulmod(mload(0x40c0), mload(0x37a0), f_q))
mstore(0x41c0, mulmod(mload(0x40e0), mload(0x37a0), f_q))
mstore(0x41e0, addmod(mload(0x4080), mload(0x4140), f_q))
{
            let result := mulmod(mload(0x980), mload(0x3200), f_q)
mstore(16896, result)
        }
mstore(0x4220, mulmod(mload(0x4200), mload(0x36c0), f_q))
mstore(0x4240, mulmod(sub(f_q, mload(0x4220)), mload(0x37c0), f_q))
mstore(0x4260, mulmod(mload(0x3ba0), mload(0x37c0), f_q))
mstore(0x4280, addmod(mload(0x41e0), mload(0x4240), f_q))
mstore(0x42a0, mulmod(mload(0x4280), mload(0x3820), f_q))
mstore(0x42c0, mulmod(mload(0x3c20), mload(0x3820), f_q))
mstore(0x42e0, mulmod(mload(0x3ca0), mload(0x3820), f_q))
mstore(0x4300, mulmod(mload(0x3d40), mload(0x3820), f_q))
mstore(0x4320, mulmod(mload(0x3de0), mload(0x3820), f_q))
mstore(0x4340, mulmod(mload(0x3e80), mload(0x3820), f_q))
mstore(0x4360, mulmod(mload(0x3f20), mload(0x3820), f_q))
mstore(0x4380, mulmod(mload(0x3fc0), mload(0x3820), f_q))
mstore(0x43a0, mulmod(mload(0x4060), mload(0x3820), f_q))
mstore(0x43c0, mulmod(mload(0x4160), mload(0x3820), f_q))
mstore(0x43e0, mulmod(mload(0x4180), mload(0x3820), f_q))
mstore(0x4400, mulmod(mload(0x41a0), mload(0x3820), f_q))
mstore(0x4420, mulmod(mload(0x41c0), mload(0x3820), f_q))
mstore(0x4440, mulmod(mload(0x4260), mload(0x3820), f_q))
mstore(0x4460, addmod(mload(0x3b80), mload(0x42a0), f_q))
mstore(0x4480, mulmod(1, mload(0x3140), f_q))
mstore(0x44a0, mulmod(1, mload(0xc00), f_q))
mstore(0x44c0, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x44e0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x4500, mload(0x4460))
success := and(eq(staticcall(gas(), 0x7, 0x44c0, 0x60, 0x44c0, 0x40), 1), success)
mstore(0x4520, mload(0x44c0))
                    mstore(0x4540, mload(0x44e0))
mstore(0x4560, mload(0x420))
                    mstore(0x4580, mload(0x440))
success := and(eq(staticcall(gas(), 0x6, 0x4520, 0x80, 0x4520, 0x40), 1), success)
mstore(0x45a0, mload(0x600))
                    mstore(0x45c0, mload(0x620))
mstore(0x45e0, mload(0x3a40))
success := and(eq(staticcall(gas(), 0x7, 0x45a0, 0x60, 0x45a0, 0x40), 1), success)
mstore(0x4600, mload(0x4520))
                    mstore(0x4620, mload(0x4540))
mstore(0x4640, mload(0x45a0))
                    mstore(0x4660, mload(0x45c0))
success := and(eq(staticcall(gas(), 0x6, 0x4600, 0x80, 0x4600, 0x40), 1), success)
mstore(0x4680, mload(0x640))
                    mstore(0x46a0, mload(0x660))
mstore(0x46c0, mload(0x3a60))
success := and(eq(staticcall(gas(), 0x7, 0x4680, 0x60, 0x4680, 0x40), 1), success)
mstore(0x46e0, mload(0x4600))
                    mstore(0x4700, mload(0x4620))
mstore(0x4720, mload(0x4680))
                    mstore(0x4740, mload(0x46a0))
success := and(eq(staticcall(gas(), 0x6, 0x46e0, 0x80, 0x46e0, 0x40), 1), success)
mstore(0x4760, mload(0x4c0))
                    mstore(0x4780, mload(0x4e0))
mstore(0x47a0, mload(0x3b60))
success := and(eq(staticcall(gas(), 0x7, 0x4760, 0x60, 0x4760, 0x40), 1), success)
mstore(0x47c0, mload(0x46e0))
                    mstore(0x47e0, mload(0x4700))
mstore(0x4800, mload(0x4760))
                    mstore(0x4820, mload(0x4780))
success := and(eq(staticcall(gas(), 0x6, 0x47c0, 0x80, 0x47c0, 0x40), 1), success)
mstore(0x4840, mload(0x500))
                    mstore(0x4860, mload(0x520))
mstore(0x4880, mload(0x42c0))
success := and(eq(staticcall(gas(), 0x7, 0x4840, 0x60, 0x4840, 0x40), 1), success)
mstore(0x48a0, mload(0x47c0))
                    mstore(0x48c0, mload(0x47e0))
mstore(0x48e0, mload(0x4840))
                    mstore(0x4900, mload(0x4860))
success := and(eq(staticcall(gas(), 0x6, 0x48a0, 0x80, 0x48a0, 0x40), 1), success)
mstore(0x4920, 0x20da3028232e79c564e4f0936bcf7b2c1e84fb5d245ae268f8a4b29a5956a8df)
                    mstore(0x4940, 0x2dea93a7c7f7613b0f81305a3bf3f85a5ffc03e4495fe2c36fb868f0c31612bd)
mstore(0x4960, mload(0x42e0))
success := and(eq(staticcall(gas(), 0x7, 0x4920, 0x60, 0x4920, 0x40), 1), success)
mstore(0x4980, mload(0x48a0))
                    mstore(0x49a0, mload(0x48c0))
mstore(0x49c0, mload(0x4920))
                    mstore(0x49e0, mload(0x4940))
success := and(eq(staticcall(gas(), 0x6, 0x4980, 0x80, 0x4980, 0x40), 1), success)
mstore(0x4a00, 0x2ef5b0cd95482550e4eb9e1a2fa8451b5bedaa867c2a57688d1da229b99ebca0)
                    mstore(0x4a20, 0x117a32bf1731fcaa3ee22a384326eba6d165a8dd0118d3d72affc20574d57b1b)
mstore(0x4a40, mload(0x4300))
success := and(eq(staticcall(gas(), 0x7, 0x4a00, 0x60, 0x4a00, 0x40), 1), success)
mstore(0x4a60, mload(0x4980))
                    mstore(0x4a80, mload(0x49a0))
mstore(0x4aa0, mload(0x4a00))
                    mstore(0x4ac0, mload(0x4a20))
success := and(eq(staticcall(gas(), 0x6, 0x4a60, 0x80, 0x4a60, 0x40), 1), success)
mstore(0x4ae0, 0x1f6d5801a22498255e15e595f749894db49935875aef0a393dc535ab83469740)
                    mstore(0x4b00, 0x2812a2b90e143d1788642bd67220e14e6b8333f34315758c328c198a261f901c)
mstore(0x4b20, mload(0x4320))
success := and(eq(staticcall(gas(), 0x7, 0x4ae0, 0x60, 0x4ae0, 0x40), 1), success)
mstore(0x4b40, mload(0x4a60))
                    mstore(0x4b60, mload(0x4a80))
mstore(0x4b80, mload(0x4ae0))
                    mstore(0x4ba0, mload(0x4b00))
success := and(eq(staticcall(gas(), 0x6, 0x4b40, 0x80, 0x4b40, 0x40), 1), success)
mstore(0x4bc0, 0x090dd3ecc6699ffa9babdcf1ce417805a704d07d05801ddf02703e5d821f67b7)
                    mstore(0x4be0, 0x256e262d07f9e444b57c1f01c491e19a897157ee97aee432caadb2a6dfd42395)
mstore(0x4c00, mload(0x4340))
success := and(eq(staticcall(gas(), 0x7, 0x4bc0, 0x60, 0x4bc0, 0x40), 1), success)
mstore(0x4c20, mload(0x4b40))
                    mstore(0x4c40, mload(0x4b60))
mstore(0x4c60, mload(0x4bc0))
                    mstore(0x4c80, mload(0x4be0))
success := and(eq(staticcall(gas(), 0x6, 0x4c20, 0x80, 0x4c20, 0x40), 1), success)
mstore(0x4ca0, 0x071e6dace60df682fe0704d74ac2fbf596fa48ef4bf15128e7d2cf25a263489a)
                    mstore(0x4cc0, 0x1b0b5926a125607f27a8ae71358319fd45bbd74a19939e13181c30dd972c5253)
mstore(0x4ce0, mload(0x4360))
success := and(eq(staticcall(gas(), 0x7, 0x4ca0, 0x60, 0x4ca0, 0x40), 1), success)
mstore(0x4d00, mload(0x4c20))
                    mstore(0x4d20, mload(0x4c40))
mstore(0x4d40, mload(0x4ca0))
                    mstore(0x4d60, mload(0x4cc0))
success := and(eq(staticcall(gas(), 0x6, 0x4d00, 0x80, 0x4d00, 0x40), 1), success)
mstore(0x4d80, 0x2f79c72218c7535eb00c849393b7586bb889142b9d0a7298f06c976d2d17cac3)
                    mstore(0x4da0, 0x1eab6020eb89c28e9597a17e715c983cb4ecf061ab2fd16f3b6bcbbc9bd49ce5)
mstore(0x4dc0, mload(0x4380))
success := and(eq(staticcall(gas(), 0x7, 0x4d80, 0x60, 0x4d80, 0x40), 1), success)
mstore(0x4de0, mload(0x4d00))
                    mstore(0x4e00, mload(0x4d20))
mstore(0x4e20, mload(0x4d80))
                    mstore(0x4e40, mload(0x4da0))
success := and(eq(staticcall(gas(), 0x6, 0x4de0, 0x80, 0x4de0, 0x40), 1), success)
mstore(0x4e60, 0x0db8a3ba55363d9ca3c41641e5146ca7110ca349de9dac531fea9f5a591c0559)
                    mstore(0x4e80, 0x05de54c9f8e63326775c36818d7bc6c48874ea66aec6f10e04df474457e3828c)
mstore(0x4ea0, mload(0x43a0))
success := and(eq(staticcall(gas(), 0x7, 0x4e60, 0x60, 0x4e60, 0x40), 1), success)
mstore(0x4ec0, mload(0x4de0))
                    mstore(0x4ee0, mload(0x4e00))
mstore(0x4f00, mload(0x4e60))
                    mstore(0x4f20, mload(0x4e80))
success := and(eq(staticcall(gas(), 0x6, 0x4ec0, 0x80, 0x4ec0, 0x40), 1), success)
mstore(0x4f40, mload(0x720))
                    mstore(0x4f60, mload(0x740))
mstore(0x4f80, mload(0x43c0))
success := and(eq(staticcall(gas(), 0x7, 0x4f40, 0x60, 0x4f40, 0x40), 1), success)
mstore(0x4fa0, mload(0x4ec0))
                    mstore(0x4fc0, mload(0x4ee0))
mstore(0x4fe0, mload(0x4f40))
                    mstore(0x5000, mload(0x4f60))
success := and(eq(staticcall(gas(), 0x6, 0x4fa0, 0x80, 0x4fa0, 0x40), 1), success)
mstore(0x5020, mload(0x760))
                    mstore(0x5040, mload(0x780))
mstore(0x5060, mload(0x43e0))
success := and(eq(staticcall(gas(), 0x7, 0x5020, 0x60, 0x5020, 0x40), 1), success)
mstore(0x5080, mload(0x4fa0))
                    mstore(0x50a0, mload(0x4fc0))
mstore(0x50c0, mload(0x5020))
                    mstore(0x50e0, mload(0x5040))
success := and(eq(staticcall(gas(), 0x6, 0x5080, 0x80, 0x5080, 0x40), 1), success)
mstore(0x5100, mload(0x7a0))
                    mstore(0x5120, mload(0x7c0))
mstore(0x5140, mload(0x4400))
success := and(eq(staticcall(gas(), 0x7, 0x5100, 0x60, 0x5100, 0x40), 1), success)
mstore(0x5160, mload(0x5080))
                    mstore(0x5180, mload(0x50a0))
mstore(0x51a0, mload(0x5100))
                    mstore(0x51c0, mload(0x5120))
success := and(eq(staticcall(gas(), 0x6, 0x5160, 0x80, 0x5160, 0x40), 1), success)
mstore(0x51e0, mload(0x7e0))
                    mstore(0x5200, mload(0x800))
mstore(0x5220, mload(0x4420))
success := and(eq(staticcall(gas(), 0x7, 0x51e0, 0x60, 0x51e0, 0x40), 1), success)
mstore(0x5240, mload(0x5160))
                    mstore(0x5260, mload(0x5180))
mstore(0x5280, mload(0x51e0))
                    mstore(0x52a0, mload(0x5200))
success := and(eq(staticcall(gas(), 0x6, 0x5240, 0x80, 0x5240, 0x40), 1), success)
mstore(0x52c0, mload(0x680))
                    mstore(0x52e0, mload(0x6a0))
mstore(0x5300, mload(0x4440))
success := and(eq(staticcall(gas(), 0x7, 0x52c0, 0x60, 0x52c0, 0x40), 1), success)
mstore(0x5320, mload(0x5240))
                    mstore(0x5340, mload(0x5260))
mstore(0x5360, mload(0x52c0))
                    mstore(0x5380, mload(0x52e0))
success := and(eq(staticcall(gas(), 0x6, 0x5320, 0x80, 0x5320, 0x40), 1), success)
mstore(0x53a0, mload(0xba0))
                    mstore(0x53c0, mload(0xbc0))
mstore(0x53e0, sub(f_q, mload(0x4480)))
success := and(eq(staticcall(gas(), 0x7, 0x53a0, 0x60, 0x53a0, 0x40), 1), success)
mstore(0x5400, mload(0x5320))
                    mstore(0x5420, mload(0x5340))
mstore(0x5440, mload(0x53a0))
                    mstore(0x5460, mload(0x53c0))
success := and(eq(staticcall(gas(), 0x6, 0x5400, 0x80, 0x5400, 0x40), 1), success)
mstore(0x5480, mload(0xc40))
                    mstore(0x54a0, mload(0xc60))
mstore(0x54c0, mload(0x44a0))
success := and(eq(staticcall(gas(), 0x7, 0x5480, 0x60, 0x5480, 0x40), 1), success)
mstore(0x54e0, mload(0x5400))
                    mstore(0x5500, mload(0x5420))
mstore(0x5520, mload(0x5480))
                    mstore(0x5540, mload(0x54a0))
success := and(eq(staticcall(gas(), 0x6, 0x54e0, 0x80, 0x54e0, 0x40), 1), success)
mstore(0x5560, mload(0x54e0))
                    mstore(0x5580, mload(0x5500))
mstore(0x55a0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x55c0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x55e0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5600, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5620, mload(0xc40))
                    mstore(0x5640, mload(0xc60))
mstore(0x5660, 0x0181624e80f3d6ae28df7e01eaeab1c0e919877a3b8a6b7fbc69a6817d596ea2)
            mstore(0x5680, 0x1783d30dcb12d259bb89098addf6280fa4b653be7a152542a28f7b926e27e648)
            mstore(0x56a0, 0x00ae44489d41a0d179e2dfdc03bddd883b7109f8b6ae316a59e815c1a6b35304)
            mstore(0x56c0, 0x0b2147ab62a386bd63e6de1522109b8c9588ab466f5aadfde8c41ca3749423ee)
success := and(eq(staticcall(gas(), 0x8, 0x5560, 0x180, 0x5560, 0x20), 1), success)
success := and(eq(mload(0x5560), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }